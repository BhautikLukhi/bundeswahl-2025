---
title: "02 Social Media"
format:
  html:
    code-fold: true
    message: false
    warning: false
---

```{r setup}
library(tidyverse)
library(ggtext)
library(gganimate)
library(gt)
library(gtsummary)
library(here)
library(haven)
library(labelled)
library(treemapify)
library(grid)


knitr::opts_chunk$set(dev = "ragg_png")

source(here("R", "custom-theme.R"))
theme_set(theme_custom())
```

## Datenquelle

### Bericht

<https://library.fes.de/pdf-files/a-p-b/21722.pdf>

### Daten einlesen

```{r read-data}
df <- read_stata(here("data", "EPW2024", "ew24AW.dta"))
```

## Datenexploration

```{r}
df |> 
  select(geschlecht, alter) |> 
  mutate(across(everything(), haven::as_factor)) |> 
  tbl_summary()
```

```{r}
create_summary_table <- function(x) {
  df <- df |> 
    select(all_of(x)) |> 
    mutate(across(everything(), haven::as_factor))
  colnames(df) <- "var"
  df |> 
    tbl_summary(
      label = list("var" = "Label")
    )
}

vars <- colnames(df)[str_detect(colnames(df), "^v32_")]
var_labels <- unlist(var_label(df[, vars]))

map(vars, create_summary_table) |> 
  tbl_merge(
    tab_spanner = var_labels
  )

```

Welcher Anteil informiert sich ausschließlich über Internet und Social Media?

```{r fig.width=8}

var_labels_v31 <- df |> 
  select(starts_with("v31_")) |> 
  get_variable_labels() |> 
  unlist()

var_labels_v31 <- c("TV o. Mediathek", "Radio o. Audiothek", 
                    "Gedruckte/elektronische Zeitungen", "Beiträge im Internet",
                    "Beiträge in sozialen Medien")
names(var_labels_v31) <- paste0("v31_", 1:5)

val_labels_v31 <- val_labels(df$v31_1) |> 
  unlist()

df |> 
  select(starts_with("v31_")) |> 
  na.omit() |> 
  pivot_longer(cols = everything(), names_to = "variable", values_to = "freq") |> 
  mutate(quelle = var_labels_v31[variable]) |> 
  count(quelle, freq) |> 
  group_by(quelle) |> 
  mutate(share = n / sum(n)) |> 
  ungroup() |> 
  mutate(freq = as.numeric(freq) - 1) |> 
  ggplot(aes(freq, share)) +
  geom_col() + 
  scale_x_reverse() +
  scale_y_continuous(labels = scales::label_percent()) +
  coord_flip() +
  facet_wrap(vars(quelle), nrow = 1) +
  theme(
    strip.text = element_textbox(width = 0.8, hjust = 0)
  )

```

## Datenvisualisierungen

### Nutzung von Informationsquellen

```{r nutzung-informationsquellen-prep, fig.width=7}

var_labels_v31 <- df |> 
  select(starts_with("v31_")) |> 
  get_variable_labels() |> 
  unlist()

var_labels_v31 <- c("TV o. Mediathek", "Radio o. Audiothek", 
                    "Gedruckte/ elektronische Zeitungen", "Beiträge im Internet",
                    "Beiträge in sozialen Medien")
names(var_labels_v31) <- paste0("v31_", 1:5)

n_responses_v31 <- df |> 
  select(starts_with("v31_")) |> 
  na.omit() |> nrow()

df_informationsquellen <- df |> 
  select(starts_with("v31_")) |> 
  na.omit() |> 
  pivot_longer(cols = everything(), names_to = "variable", values_to = "freq") |> 
  mutate(quelle = var_labels_v31[variable]) |> 
  mutate(
    quelle = factor(quelle, levels = rev(var_labels_v31)),
    freq = as.numeric(freq) - 1,
    freq_cat = case_when(
      freq == 0 ~ "Nie",
      freq <= 2 ~ "An 1-2 Tagen",
      freq <= 5 ~ "An 3-5 Tagen",
      freq <= 7 ~ "An 6-7 Tagen"
    ),
    freq_cat = factor(freq_cat, 
                      levels = c("Nie", "An 1-2 Tagen", 
                                 "An 3-5 Tagen", "An 6-7 Tagen"))
  ) |> 
  count(quelle, freq_cat) |> 
  group_by(quelle) |> 
  mutate(share = n / sum(n)) |> 
  ungroup()
```

```{r nutzung-informationsquellen-plot-1, fig.width=7}

df_informationsquellen |> 
  ggplot(aes(freq_cat, share)) +
  geom_col(
    aes(fill = quelle %in% c("Beiträge im Internet", "Beiträge in sozialen Medien")),
    width = 0.75) + 
  geom_text(
    aes(
      label = scales::percent(share, accuracy = 1),
      hjust = ifelse(share < 0.25, -0.3, 1.3),
      col = ifelse(share < 0.25, "grey10", "white")),
    family = "Roboto Slab", fontface = "bold"
  ) +
  geom_hline(aes(yintercept = 0)) +
  scale_y_continuous(
    labels = scales::label_percent(), expand = expansion(mult = c(0, 0.05))) +
  scale_color_identity() +
  scale_fill_manual(values = c("FALSE" = color_pal[1], "TRUE" = color_pal[3])) +
  coord_flip() +
  facet_wrap(vars(quelle), nrow = 1) +
  guides(fill = "none") +
  labs(
    title = sprintf("Beiträge in <span style='color: %s'>Social Media und Internet</span> als wichtige politische<br>Informationsquelle für junge Menschen", color_pal[3]),
    subtitle = "Nutzungshäufigkeit verschiedener Informationsquellen über den Wahlkampf und die Parteien zur Europawahl",
    caption = sprintf(
      "Daten: Jugendwahlstudie zur Europawahl 2024 (%s Befragte zwischen 15 und 20 Jahren). Visualisierung: Ansgar Wolsing & Thorsten Faas.", 
      scales::number(n_responses_v31, big.mark = ".")),
    x = NULL, 
    y = NULL
  ) +
  theme(
    strip.text = element_textbox(
      family = "Roboto Condensed SemiBold", size = 10, width = 0.8, height = 0.1, 
      hjust = 0, vjust = 1, margin = margin(t = 4, b = 3)),
    panel.grid = element_blank(),
    axis.text.x = element_blank()
  )

```

```{r nutzung-informationsquellen-plot-2, fig.width=6, fig.height=6}

# Reihenfolge der Informationsquellen bestimmen
df_informationsquellen$quelle <- factor(
  df_informationsquellen$quelle,
  levels = df_informationsquellen |> 
    filter(freq_cat == "An 6-7 Tagen") |>
    arrange(-share) |> 
    pull(quelle) |> 
    unname()
)

df_informationsquellen |>
  group_by(quelle) |> 
  arrange(desc(freq_cat)) |> 
  mutate(label_pos_y = cumsum(lag(share, default = 0)) + share / 2) |> 
  ungroup() |> 
  ggplot(aes(x = 1, n, fill = freq_cat)) +
  geom_col(
    aes(alpha = quelle == "Beiträge in sozialen Medien"),
    position = "fill", col = "white") + 
  geom_text(
    data = ~subset(. , quelle == "Beiträge in sozialen Medien"),
    aes(y = label_pos_y, label = freq_cat),
    family = "Roboto Condensed SemiBold", col = "white", size = 4, hjust = 0.5
  ) +
  scale_x_discrete(expand = expansion(mult = c(0, 0.025))) +
  scale_y_continuous(
    breaks = seq(0, 1, 0.2), labels = scales::label_percent()) +
  scale_fill_manual(values = c("#1b1b3a", "grey70", "#9EC5AB", "#216869")) +
  scale_alpha_manual(values = c(0.5, 1)) +
  coord_flip() +
  guides(
    # fill = guide_legend(rev = TRUE),
    fill = "none",
    alpha = "none"
  ) +
  labs(
     title = "Beiträge in Social Media und im Internet allgemein als<br>
                     wichtige politische Informationsquelle für junge Menschen",
    subtitle = "Nutzungshäufigkeit verschiedener Informationsquellen über den<br>
    Wahlkampf und die Parteien zur Europawahl",
    caption = sprintf(
      "Daten: Jugendwahlstudie zur Europawahl 2024 (%s Befragte zwischen 15 und 20<br>
      Jahren). Visualisierung: Ansgar Wolsing & Thorsten Faas.", 
      scales::number(n_responses_v31, big.mark = ".")),
    x = NULL, y = NULL, fill = NULL
  ) +
  facet_wrap(vars(quelle), ncol = 1, scales = "free_x") +
  theme(
    legend.position = "top",
    legend.justification = "left",
    panel.grid = element_blank(),
    strip.text = element_text(family = "Roboto Condensed SemiBold", size = 10, hjust = 0)
  )
```

### Inhalte mit Politikbezug in Sozialen Medien

```{r beitraege-politik-social-media, fig.width=8, fig.height=8}
var_labels <- df |> 
  select(starts_with("v33_")) |> 
  get_variable_labels() |> 
  unlist()

freq_politikbezug <- df |> 
  select(invcode, starts_with("v33_")) |> 
  mutate(across(starts_with("v33_"), to_factor)) |> 
  pivot_longer(cols = starts_with("v33_"), names_to = "platform", values_to = "freq_politikbezug") |> 
  mutate(platform = var_labels[platform]) |> 
  na.omit() |> 
  count(platform, freq_politikbezug) |> 
  mutate(freq_politikbezug2 = case_when(
    str_sub(freq_politikbezug, 1, 1) %in% c(1, 2) ~ "Selten/nie",
    str_sub(freq_politikbezug, 1, 1) %in% c(4, 5) ~ "Häufig/sehr häufig",
    str_sub(freq_politikbezug, 1, 1) == 3 ~ "Manchmal"
  )) |> 
  add_count(platform, freq_politikbezug2, wt = n, name = "n2") 

# Reihenfolge der Plattformen
platforms_freq_order <- freq_politikbezug |> 
  add_count(platform, wt = n, name = "total_n") |> 
  filter(freq_politikbezug2 == "Häufig/sehr häufig") |> 
  mutate(share = n2 / total_n) |> 
  arrange(share) |> 
  distinct(platform) |> 
  pull()

n_responses_v32 <- sum(!is.na(df$v32_1))

freq_politikbezug |> 
  filter(platform != "Anderes Netzwerk") |> 
  mutate(platform = factor(platform, levels = platforms_freq_order)) |> 
  ggplot(aes(n, platform, fill = freq_politikbezug, group = freq_politikbezug)) +
  geom_col(position = "fill", color = "white") +
  scale_x_continuous(
    labels = scales::label_percent(), breaks = seq(0, 1, 0.1), position = "top",
    expand = expansion(mult = c(0, 0))) +
  scale_fill_manual(values = c(
    color_pal[4], colorspace::lighten(color_pal[4], 0.3), 
    "grey75", 
    colorspace::lighten(color_pal[2], 0.3), color_pal[2])) +
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(
    title = "Auf TikTok sehen junge Menschen am häufigsten Beiträge über Politik",
    subtitle = "Anteil der Häufigkeit von Beiträgen über Politik auf ausgewählten sozialen Netzwerken",
    caption = sprintf(
      "Daten: Jugendwahlstudie zur Europawahl 2024 (%s Befragte zwischen 15 und 20 Jahren).<br>Visualisierung: Ansgar Wolsing & Thorsten Faas.", 
    scales::number(n_responses_v32, big.mark = ".")),
    x = "Anteil", y = NULL, fill = NULL
  ) +
  theme(
    legend.position = "top",
    axis.text = element_text(size = 12),
    axis.text.y = element_markdown(hjust = 0, lineheight = 0.9),
    panel.grid = element_blank(),
    plot.margin = margin(t = 4, r = 16, b = 4, l = 4)
    )
```

**Idee:** Die Höhe der Balken der Plattform spiegelt die Anzahl der Nutzer wieder. Social Media mit hoher Nutzung haben entsprechend höhere Balken als Plattformen mit geringerer Nutzung. Bluesky geht in dieser Darstellung unter, der Balken zwischen Threads und Facebook ist nicht erkennbar.

```{r beitraege-politik-social-media-marimekko, fig.width=8, fig.height=8}

# Nutzung
platforms_mapping <- var_label(select(df, starts_with("v32_"))) |> as.character()
names(platforms_mapping) <- colnames(select(df, starts_with("v32_")))

df_platform_users <- df |> 
  select(starts_with("v32_")) |> 
  na.omit() |> 
  pivot_longer(cols = everything(), names_to = "platform", values_to = "used") |> 
  mutate(
    platform = platforms_mapping[platform],
    platform = ifelse(platform == "Tiktok", "TikTok", platform)) |> 
  group_by(platform) |> 
  summarize(
    n_users = sum(used == 1),
    share_users = mean(used == 1))
  

df_marimekko <- freq_politikbezug |> 
  filter(!platform %in% c("Anderes Netzwerk", "BlueSky")) |> 
  mutate(platform = factor(platform, levels = platforms_freq_order)) |> 
  arrange(platform) |> 
  # get the lower and upper boundary for the rectangle for each platform
  add_count(platform, wt = n, name = "n_nutzer_platform") |> 
  nest(data = -c(platform, n_nutzer_platform)) |> 
  mutate(
    n_nutzer_platform_cumul = cumsum(n_nutzer_platform),
    n_nutzer_platform_cumul_lag = lag(n_nutzer_platform_cumul, 1, default = 0),
    pos_label = n_nutzer_platform_cumul_lag + n_nutzer_platform / 2
    ) |> 
  unnest(data) |> 
  # get the position for each segment within a bar (platform)
  group_by(platform) |> 
  arrange(desc(freq_politikbezug), .by_group = TRUE) |> 
  mutate(
    share_politikbezug = n / sum(n),
    share_politikbezug_cumul = cumsum(share_politikbezug),
    share_politikbezug_cumul_lag = lag(share_politikbezug_cumul, 1, default = 0)
  ) |> 
  ungroup() |> 
  select(-c(n, n2, n_nutzer_platform, freq_politikbezug2))

# Labels und Positionen der Labels auf der y-Achse bestimmen
platform_labels_marimekko <- df_marimekko |> 
  distinct(platform, pos_label) |> 
  inner_join(df_platform_users, by = join_by(platform)) |> 
  # Positionen FB und Threads manuell anpassen
  mutate(
    pos_label = case_when(
      platform == "Threads" ~ pos_label + 300,
      platform == "Facebook" ~ pos_label - 300,
      TRUE ~ pos_label
    ),
    platform_label = sprintf(
      "**%s**%s(%s)", platform, 
      ifelse(platform %in% c("Threads", "Facebook"), " ", "<br>"),
      scales::percent(share_users, accuracy = 0.1))
  )

n_responses_v32 <- sum(!is.na(df$v32_1))

df_marimekko |> 
  ggplot(aes(fill = freq_politikbezug)) +
  geom_rect(
    aes(xmin = share_politikbezug_cumul_lag, xmax = share_politikbezug_cumul,
        ymin = n_nutzer_platform_cumul_lag, ymax = n_nutzer_platform_cumul),
    color = "white"
  ) +
  scale_x_continuous(
    labels = scales::label_percent(), breaks = seq(0, 1, 0.1), position = "top",
    expand = expansion(mult = c(0, 0))) +
  scale_y_continuous(
    breaks = platform_labels_marimekko$pos_label,
    labels = platform_labels_marimekko$platform_label,
    expand = c(0, 0)
  ) +
  scale_fill_manual(values = c(
    color_pal[4], colorspace::lighten(color_pal[4], 0.3), 
    "grey75", 
    colorspace::lighten(color_pal[2], 0.3), color_pal[2])) +
  guides(fill = guide_legend(reverse = TRUE)) +
  labs(
    title = "Auf TikTok sehen junge Menschen am häufigsten Beiträge über Politik",
    subtitle = "Anteil der Häufigkeit von Beiträgen über Politik auf ausgewählten sozialen Netzwerken.<br>Die Höhe der Balken zeigt an, wie viele Menschen die jeweilige Plattform nutzen<br> (Mehrfachantworten möglich).",
    caption = sprintf(
      "Frage: Wenn Sie einmal an die Beiträge denken, die Sie in Ihren sozialen Netzwerken in
      der vergangenen Woche gesehen haben: Wie häufig hatten diese einen Bezug zu
      Politikerinnen und Politikern, Parteien oder politischen Themen zur Europawahl?
      <br><br>
      Daten: Jugendwahlstudie zur Europawahl 2024 (%s Befragte zwischen 15 und 20 Jahren).
      Visualisierung: Ansgar Wolsing & Thorsten Faas.", 
      scales::number(n_responses_v32, big.mark = ".")),
    x = "Anteil (in %)", y = NULL, fill = NULL
    
  ) +
  theme(
    legend.position = "top",
    axis.text = element_text(size = 12),
    axis.text.y = element_markdown(hjust = 0, lineheight = 0.9),
    panel.grid.major.x = element_line(),
    panel.grid.minor.x = element_line(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    plot.margin = margin(t = 4, r = 16, b = 4, l = 4)
    )
```

### Am stärksten wahrgenommene Parteien

Diejenigen, die v34 mit Ja beantwortet haben, wurden zufällig v35 oder v36 zugewiesen.

TF: Man müsste also die „weiß nicht“-, „alle gleich“- u „ja-Anteile“ aus v34 nehmen u dann anhand von v35 den Ja-Anteil aufspalten (prozentual).

```{r dataprep-haeufigste-parteien}

# Kamen einzelne Parteien häufiger vor?
df_antworten_v34 <- df |> 
  mutate(v34 = case_when(
    v34 == 1 ~ "Ja",
    v34 == 2 ~ "Alle ungefähr gleich",
    v34 == 3 ~ "Weiß nicht"
  )) |> 
  count(v34) |> 
  filter(!is.na(v34)) |> 
  mutate(share = n / sum(n))

n_responses_v34 <- sum(df_antworten_v34$n)
v34_ja_anteil <- df_antworten_v34$share[df_antworten_v34$v34 == "Ja"]

# Welche Partei kam am häufigsten vor (wenn v34 = Ja)
df_antworten_v36 <- df |> 
  mutate(v36_1 = to_factor(v36_1)) |> 
  count(v36_1, sort = TRUE) |> 
  filter(!is.na(v36_1)) |> 
  mutate(
    share = n / sum(n),
    # Umrechnung, so dass der Anteil der Antworten aus v36 in Summe den Ja-Anteil von v34 ergibt
    share_adjusted = share * v34_ja_anteil,
    v36_1 = if_else(
      v36_1 == "9. Andere Partei, und zwar:", 
      "Sonstige", 
      str_remove(v36_1, "^\\d+\\.\\s")))

# Anteile aus beiden Fragen kombinieren, Ja aus v34 ersetzen mit Antworten aus v36
df_social_media_parties <- df_antworten_v34 |> 
  filter(v34 != "Ja") |> 
  bind_rows(df_antworten_v36) |> 
  transmute(
    antwort = ifelse(!is.na(v34), v34, v36_1),
    ja_nein_group = ifelse(!is.na(v34), "Nein", "Ja"),
    n,
    share_adjusted = ifelse(!is.na(v34), share, share_adjusted)
  )

# Prüfen, ob die Summe der Anteile 1 ergibt
sum(df_social_media_parties$share_adjusted)
```

#### Variante mit Standardsortierung der Parteien nach Präsenz

```{r treemap-haeufigste-parteien}

ragg::agg_png(
  here("02-social-media", "plots", "treemap-haeufigste-parteien.png"),
  width = 1800, height = 1600, units = "px", res = 300)  
df_social_media_parties |> 
  mutate(party_fill = ifelse(antwort %in% c("CDU", "CSU"), "CDU/CSU", antwort)) |> 
  ggplot(
    aes(
      area = share_adjusted, subgroup = ja_nein_group, 
      subgroup2 = paste(antwort, scales::percent(share_adjusted, accuracy = 0.1, decimal.mark = ","), sep = "\n"), fill = party_fill)) +
  geom_treemap(layout = "scol") +
  geom_treemap_subgroup_border(layout = "scol", col = "white", size = 3) +
  geom_treemap_subgroup2_border(layout = "scol", col = "white", size = 1.6) +
  geom_treemap_subgroup2_text(
    aes(col = ifelse(antwort %in% c("FDP"), "black", "white")),
    layout = "scol",
    family = "Roboto Condensed SemiBold", grow = FALSE, size = 13, min.size = 3, 
    place = "topleft", padding.x = unit(0.01, "npc"), padding.y = unit(0.02, "npc")
    ) +
  scale_fill_manual(values = c("Weiß nicht" = "grey58", "Alle ungefähr gleich" = "grey55", party_pal)) +
  scale_color_identity() +
  guides(fill = "none") +
  labs(
    title = "Wahrgenommene Präsenz einzelner Parteien auf sozialen Netzwerkplattformen vor der Europawahl 2024",
    subtitle = "Verteilung der Antworten auf die Frage, ob bestimmte Parteien in den jeweils genutzten sozialen Netzwerkplattformen besonders häufig vorkamen und – falls ja – welche Parteien das waren.<br>",
    caption = sprintf("Daten: Jugendwahlstudie zur Europawahl 2024 (n=%s Befragte zwischen<br>15 und 20 Jahren). Visualisierung: Ansgar Wolsing & Thorsten Faas.", 
                      scales::number(n_responses_v34, big.mark = ".", decimal.mark = ","))
  ) +
  theme_minimal(base_family = "Roboto Condensed", base_size = 12) +
  theme(
    plot.background = element_rect(color = "white", fill = "white"),
    plot.margin = margin(t = 4, l = 6, r = 6, b = 4),
    plot.title = element_textbox(
      width = 1, family = "Roboto Slab", face = "bold", lineheight = 1.25),
    plot.title.position = "plot",
    plot.subtitle = element_textbox(
      width = 1, family = "Roboto Slab", lineheight = 1.25),
    plot.caption = element_markdown(
      family = "Roboto Slab", hjust = 0, lineheight = 1.1)
  )  
grid.text("CSU 0,2%", x = 0.52, y = 0.76, 
          gp = gpar(fontfamily = "Roboto Condensed SemiBold", col = "black", cex = 0.8))
grid.curve(
  x1 = 0.52, y1 = 0.748,
  x2 = 0.52, y2 = 0.72,
  curvature = 1, angle = 0,
  arrow = arrow(type = "open", length = unit(0.05, "inches")), 
  gp = gpar(col = "white", lwd = 2, lty = "solid") 
)
grid.curve(
  x1 = 0.52, y1 = 0.748,
  x2 = 0.52, y2 = 0.72,
  curvature = 1, angle = 0,
  arrow = arrow(type = "open", length = unit(0.05, "inches")), 
  gp = gpar(col = "black", lwd = 1, lty = "solid") 
)

dev.off()
```

![](plots/treemap-haeufigste-parteien.png)

#### Variante mit CDU/CSU zusammengeführt, aber sichtbar getrennt

```{r treemap-haeufigste-parteien-2}

# Anteile aus beiden Fragen kombinieren, Ja aus v34 ersetzen mit Antworten aus v36
df_social_media_parties_2 <- df_antworten_v34 |> 
  filter(v34 != "Ja") |> 
  bind_rows(df_antworten_v36) |> 
  transmute(
    antwort = ifelse(!is.na(v34), v34, v36_1),
    ja_nein_group = ifelse(!is.na(v34), "Nein", "Ja"),
    party_group = ifelse(antwort %in% c("CDU", "CSU"), "CDU/CSU", antwort),
    n,
    share_adjusted = ifelse(!is.na(v34), share, share_adjusted)
  )

# Prüfen, ob die Summe der Anteil 1 ergibt
sum(df_social_media_parties$share_adjusted)

ragg::agg_png(
  here("02-social-media", "plots", "treemap-haeufigste-parteien-variante2.png"),
  width = 1800, height = 1600, units = "px", res = 300)  
df_social_media_parties_2 |> 
  ggplot(
    aes(
      area = share_adjusted, subgroup = ja_nein_group, subgroup2 = party_group, 
      subgroup3 = paste(antwort, scales::percent(share_adjusted, accuracy = 0.1, decimal.mark = ","), sep = "\n"), fill = party_group)) +
  geom_treemap(layout = "scol") +
  geom_treemap_subgroup_border(layout = "scol", col = "white", size = 3) +
  geom_treemap_subgroup2_border(layout = "scol", col = "white", size = 1.6) +
  geom_treemap_subgroup3_border(layout = "scol", col = "white", size = 1, 
                                linetype = "dotted") +
  geom_treemap_subgroup3_text(
    aes(col = ifelse(antwort %in% c("FDP"), "black", "white")),
    layout = "scol",
    family = "Roboto Condensed SemiBold", grow = FALSE, size = 16, min.size = 8, 
    place = "topleft", padding.x = unit(0.01, "npc"), padding.y = unit(0.02, "npc")
    ) +
  scale_fill_manual(values = c("Weiß nicht" = "grey58", "Alle ungefähr gleich" = "grey55", party_pal)) +
  scale_color_identity() +
  guides(fill = "none") +
  labs(
    title = "Wahrgenommene Präsenz einzelner Parteien auf sozialen Netzwerkplattformen vor der Europawahl 2024",
    subtitle = "Verteilung der Antworten auf die Frage, ob bestimmte Parteien in den jeweils genutzten sozialen Netzwerkplattformen besonders häufig vorkamen und – falls ja – welche Parteien das waren.",
    caption = sprintf("Daten: Jugendwahlstudie zur Europawahl 2024 (n=%s Befragte zwischen<br>15 und 20 Jahren). Visualisierung: Ansgar Wolsing & Thorsten Faas.", 
                      scales::number(n_responses_v34, big.mark = ".", decimal.mark = ","))
  ) +
  theme_minimal(base_family = "Roboto Condensed", base_size = 13) +
  theme(
    plot.background = element_rect(color = "white", fill = "white"),
    plot.margin = margin(t = 4, l = 6, r = 6, b = 4),
    plot.title = element_textbox(
      width = 1, family = "Roboto Slab", face = "bold", lineheight = 1.25),
    plot.title.position = "plot",
    plot.subtitle = element_textbox(
      width = 1, family = "Roboto Slab", lineheight = 1.25),
    plot.caption = element_markdown(
      family = "Roboto Slab", hjust = 0, lineheight = 1.1)
  )  
grid.text("CSU\n0,2%", x = 0.517, y = 0.65, just = "left",
          gp = gpar(fontfamily = "Roboto Condensed SemiBold", col = "white", 
                    cex = 0.7, lineheight = 0.8))

dev.off()
```

![](plots/treemap-haeufigste-parteien-variante2.png)
