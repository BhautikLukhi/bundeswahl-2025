---
title: "09 Wahlkreise"
format:
  html:
    code-fold: true
    message: false
    warning: false
---

```{r setup}
library(tidyverse)
library(ggtext)
library(here)
library(sf)
library(ggbeeswarm)
library(gganimate)

knitr::opts_chunk$set(dev = "ragg_png")

source(here("R", "custom-theme.R"))
theme_set(theme_custom())
```

## Daten

### Geodaten

Quelle: <https://www.bundeswahlleiterin.de/bundestagswahlen/2025/wahlkreiseinteilung/downloads.html>

```{r load-geodaten}
shp_wk <- st_read(here("data", "Wahlkreise", "btw25_geometrie_wahlkreise_shp_geo",
                       "btw25_geometrie_wahlkreise_shp_geo.shp"))

st_crs(shp_wk)
# target_crs <- "EPSG:3857"
# shp_wk <- st_transform(shp_wk, crs = target_crs)
```

#### Fläche der Wahlkreise berechnen

```{r}
shp_wk <- shp_wk |> 
  st_make_valid() |> 
  mutate(area = st_area(geometry))
```

### Wahlergebnisse in den Wahlkreisen

```{r load-data-function}

# Seit 2005 ist die Partei nur einmal in der obersten Headerzeile genannt, 
  # danach leere Spalten
  expand_header <- function(header) {
    parts <- str_split(header, ";")
    expanded <- accumulate(parts, ~ ifelse(.y == "" | is.na(.y), .x, .y))
    expanded
  }

prepare_header <- function(x, year) {
  x <- x |> 
    unlist() |> 
    as.character() 
  
  if (year > 1949) {
    x <- expand_header(x)  
  }
  x
}

has_data <- function(x) {
  sum(!is.na(x)) > 0 
}


load_data <- function(year) {
  
  filename <- here("data", "Wahlkreise", 
                   "btw_kerg", sprintf("btw%s_kerg.csv", year))
  
  encoding <- guess_encoding(filename) |> 
    pull(encoding) |> 
    head(1)
  
  df_wk_head_lines <- read_lines(filename, 
                          locale = locale("de", encoding = encoding), n_max = 10)
  
  # Erste Datenzeile finden
  # unterschiedliche Struktur:
  ## bis einschließlich 2017 sind die ersten Nichtdatenzahlen mit # vorangestellt
  if (year <= 2017) {
    skip_rows <- max(which(str_detect(df_wk_head_lines, "^#")))
  } else if (year == 2021) {
    skip_rows <- 2 
  } else if (year == 2025) {
    skip_rows <- 5
  }
  
  # Kopfzeile extrahieren und neu kombinieren (einzeilig)
  ## Ab 2002 haben die Datensätze eine 3. Kopfzeile: "Endgültig,Vorperiode"
  df_wk_head <- read_csv2(filename, 
                          locale = locale("de", encoding = encoding), 
                          skip = skip_rows, # n_max = 100, 
                          col_names = FALSE,
                          show_col_types = FALSE)
  
  # Leere Spalten am Ende entfernen
  df_wk_head <- select(df_wk_head, where(has_data))
  
  header_1 <- prepare_header(df_wk_head[1, ], year)
  header_2 <- prepare_header(df_wk_head[2, ], year)
  
  colnames_combined <- case_when(
    header_1 == "" | is.na(header_1) ~ header_2,
    header_2 == "" | is.na(header_2) ~ header_1,
    TRUE ~ paste(header_1, header_2, sep = "_")
  )
  
  if (year >= 2005) {
    skip_rows <- skip_rows + 1
    header_3 <- df_wk_head[3, ] |> unlist() |> as.character()
    colnames_combined <- ifelse(
      header_3 != "" & !is.na(header_3), 
      paste(colnames_combined, header_3, sep = "_"), colnames_combined)
  }
  
  # Daten vollständig einlesen
  df_wk <- read_csv2(filename, skip = skip_rows + 2, col_names = FALSE,
                     show_col_types = FALSE)
  colnames(df_wk) <- colnames_combined
  
  # In manchen Dateien sind leere Spalten ohne Spaltennamen (NA) enthalten
  df_wk <- df_wk[!is.na(names(df_wk))]
  
  # Entferne Variablen der Vorperiode (ab 2009)
  if (year >= 2005) {
    df_wk <- df_wk |> 
      select(-ends_with("_Vorperiode"))
  }
    
  # Angleichung der Spaltennamen
  if (year == 1949) {
    df_wk <- df_wk |> 
      rename(wknr = 1, wkname = 2, bundesland = 3, 
             wahlberechtigte = 4,
             waehler = 5,
             ungueltige = 6,
             gueltige = 7) |> 
      filter(!is.na(wknr)) 
  } else if (year > 1949 & year < 2005) {
      df_wk <- df_wk |> 
        rename(wknr = 1, wkname = 2, bundesland = 3, 
               wahlberechtigte = 4,
               waehler = 5,
               ungueltige = 6, ungueltige_Zweitstimmen = 7,
               gueltige_Erststimmen = 8, gueltige_Zweitstimmen = 9) |> 
        filter(!is.na(wknr)) 
  } else if (year >= 2005 & year <= 2021) {
    df_wk <- df_wk |> 
      rename(wknr = 1, wkname = 2, bundesland = 3, 
             wahlberechtigte = 4, wahlberechtigte_Zweitstimmen = 5,
             waehler = 6, waehler_Zweitstimmen = 7,
             ungueltige = 8, ungueltige_Zweitstimmen = 9,
             gueltige_Erststimmen = 10, gueltige_Zweitstimmen = 11) |> 
      select(-c(wahlberechtigte_Zweitstimmen, waehler_Zweitstimmen, 
                ungueltige_Zweitstimmen)) |> 
      filter(!is.na(wknr)) 
    colnames(df_wk) <- str_remove(colnames(df_wk), "_Endgültig")  
  } else if (year == 2025) {
    df_wk <- df_wk |> 
      rename(wknr = 1, wkname = 2, bundesland = 3, 
             gewaehlt = 4, # neue Spalte für Partei des Mandatsgewinners
             wahlberechtigte = 5, wahlberechtigte_Zweitstimmen = 6,
             waehler = 7, waehler_Zweitstimmen = 8,
             ungueltige = 9, ungueltige_Zweitstimmen = 10,
             gueltige_Erststimmen = 11, gueltige_Zweitstimmen = 12) |> 
      select(-c(wahlberechtigte_Zweitstimmen, waehler_Zweitstimmen, 
                ungueltige_Zweitstimmen)) |> 
      filter(!is.na(wknr)) 
    colnames(df_wk) <- str_remove(colnames(df_wk), "_(Endgültig|Vorläufig)")  
  }
  
  
  # Long format
  if (year == 1949) {
    df_wk_long <- df_wk |> 
      pivot_longer(cols = -c(wknr:gueltige), 
                   # Zwecks Konsistenz bewusst in partei und stimme splitten, 
                   # obwohl es die Namensstruktur hier nicht gibt
                   names_to = c("partei", "stimme"), names_sep = "_",
                   values_to = "anzahl") |> 
      pivot_longer(cols = wahlberechtigte:gueltige,
                   names_to = c("kennzahl", "stimme2"), names_sep = "_",
                   values_to = "anzahl_basis")
  } else {
    df_wk_long <- df_wk |> 
      pivot_longer(cols = -c(wknr:gueltige_Zweitstimmen), 
                   names_to = c("partei", "stimme"), names_sep = "_",
                   values_to = "anzahl") |> 
      pivot_longer(cols = wahlberechtigte:gueltige_Zweitstimmen,
                   names_to = c("kennzahl", "stimme2"), names_sep = "_",
                   values_to = "anzahl_basis") |> 
      filter(is.na(stimme2) | stimme == stimme2)
  }
  
  df_wk_long <- df_wk_long |> 
    select(-stimme2) |> 
    mutate(
      wknr = as.integer(wknr),
      bundesland = as.character(bundesland),
      kennzahl = kennzahl) |> 
    pivot_wider(
      names_from = "kennzahl", values_from = "anzahl_basis", 
      values_fn = min
    ) |> 
    mutate(anteil = anzahl / gueltige) |> 
    relocate(anteil, .before = 7)
  
  df_wk_long
}
```

```{r load-data, cache=TRUE, message=FALSE, warning=FALSE}

df_wk_ergebnisse <- load_data(2025)
```

```{r prep-data-function}
prepare_firstvote_data <- function(x, year) {
  
  x <- x |> 
    # Nur Erststimmen auf Wahlkreisebene
    filter(stimme == "Erststimmen" & wknr < 900 & bundesland != "99") 
  
  if (year == 2025) {
    x <- select(x, wknr, wkname, bundesland, partei, anteil, gewaehlt)
  } else {
    x <- select(x, wknr, wkname, bundesland, partei, anteil)
  }
  
  x  |> 
    na.omit() |> 
    # Erst- und Zweitplatzierte
    group_by(wknr) |> 
    slice_max(order_by = anteil, n = 2, with_ties = FALSE) |> 
    arrange(-anteil, .by_group = TRUE) |> 
    # Abstand zum Zweitplatzierten
    mutate(anteil_zweiter = lead(anteil, default = NULL)) |> 
    # Den Zweitplatzierten entfernen
    filter(!is.na(anteil_zweiter)) |> 
    ungroup() |> 
    rename(wk_gewinner_partei = partei, anteil_gewinner = anteil) |> 
    mutate(wk_abstand = anteil_gewinner - anteil_zweiter) |> 
    mutate(wk_gewinner_partei = case_match(
      wk_gewinner_partei, 
      "GRÜNE" ~ "Grüne",
      "DIE LINKE" ~ "Linke",
      .default = wk_gewinner_partei
    ))
}
```

```{r prep-data, cache=TRUE}
df_wk_abstand <- prepare_firstvote_data(df_wk_ergebnisse, 2025)
df_wk_abstand <- df_wk_abstand |> 
  mutate(
    wk_gewinner_partei = case_match(
      wk_gewinner_partei,
      "Christlich Demokratische Union Deutschlands" ~ "CDU",
      "C D U" ~ "CDU",
      "Christlich-Soziale Union in Bayern e.V." ~ "CSU",
      "C S U" ~ "CSU",
      "Sozialdemokratische Partei Deutschlands" ~ "SPD",
      "S P D" ~ "SPD",
      "BÜNDNIS 90/DIE GRÜNEN" ~ "Grüne",
      "Linke" ~ "Linke",
      "Die Linke." ~ "Linke",
      "PDS" ~ "Linke",
      "Alternative für Deutschland" ~ "AfD",
      .default = wk_gewinner_partei
    ),
    wk_gewinner_partei = fct_infreq(wk_gewinner_partei)
  )
```

### Wahlkreis-Ergebnisse und Geodaten zusammenführen

```{r join-geo-ergebnisse}

df_wk_abstand_area <- df_wk_abstand |> 
  inner_join(
    select(shp_wk, WKR_NR, area), 
    by = join_by(wknr == WKR_NR)) |> 
  st_drop_geometry() |> 
  select(-geometry) |> 
  mutate(
    area_m2 = as.numeric(area),
    area_km2 = area_m2 / 1000 ^ 2)

# Test
sum(df_wk_abstand_area$area_km2)
```

### Erststimmenergebnisse der Parteien bundesweit

```{r}

# Anzahl gewonnener Wahlkreise
df_wk_anzahl_wahlkreise <- df_wk_abstand |> 
  group_by(wk_gewinner_partei) |> 
  summarize(anzahl_wahlkreise = n()) |> 
  mutate(anteil_wahlkreise = anzahl_wahlkreise / sum(anzahl_wahlkreise))


# Anteil gewonnener Erststimmen
df_erststimmen_bund <- df_wk_ergebnisse |> 
  filter(stimme == "Erststimmen") |> 
  mutate(
    partei = case_match(
      partei,
      "Christlich Demokratische Union Deutschlands" ~ "CDU",
      "C D U" ~ "CDU",
      "Christlich-Soziale Union in Bayern e.V." ~ "CSU",
      "C S U" ~ "CSU",
      "Sozialdemokratische Partei Deutschlands" ~ "SPD",
      "S P D" ~ "SPD",
      "BÜNDNIS 90/DIE GRÜNEN" ~ "Grüne",
      "Linke" ~ "Linke",
      "Die Linke." ~ "Linke",
      "PDS" ~ "Linke",
      "Alternative für Deutschland" ~ "AfD",
      .default = partei
    )
  ) |> 
  group_by(partei) |> 
  summarize(
    summe_erststimmen = sum(anzahl, na.rm = TRUE),
    anteil_erststimmen = summe_erststimmen / sum(gueltige, na.rm = TRUE)
  ) |> 
  inner_join(df_wk_anzahl_wahlkreise, by = join_by(partei == wk_gewinner_partei))

```

## Visualisierung

### Beeswarm

Fläche der Wahlkreise nach Parteien

```{r plot-beeswarm}

df_wk_abstand_area |> 
  mutate(wk_gewinner_partei = fct_rev(wk_gewinner_partei)) |> 
  ggplot(aes(area_km2, y = wk_gewinner_partei)) +
  geom_quasirandom(
    aes(fill = wk_gewinner_partei),
   size = 2, shape = 21, col = "white"
  ) + 
  scale_x_continuous(
    position = "top",
    labels = scales::label_number(big.mark = ".")) +
  scale_fill_manual(values = c("CSU" = "grey40", party_pal),
                    aesthetics = list("fill", "color")) +
  guides(
    fill = "none",
    shape = guide_legend(nrow = 1, override.aes = list(size = 5))
  ) +
  labs(
    title = "Fläche der Wahlkreise nach Wahlkreisgewinnern",
    caption = "Daten: Bundeswahlleiterin. Visualisierung: Ansgar Wolsing",
    x = "Fläche in km<sup>2</sup>",
    fill = "Wahlkreisgewinner"
  ) +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",
    legend.spacing.y = unit(-2, "mm"),
    axis.title.x = element_markdown(),
    axis.text.y = element_text(family = "Roboto Condensed Medium", hjust = 0),
    axis.title.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank()
  ) 

```

### Balkendiagramm Erststimmen vs. Fläche

```{r plot-erststimmen-vs-flaeche}
df_parteien_erststimmen_area <- df_wk_abstand_area |> 
  group_by(wk_gewinner_partei) |> 
  summarize(area = as.numeric(sum(area))) |> 
  mutate(anteil_area = area / sum(area))


df_erststimmen_bund |> 
  inner_join(df_parteien_erststimmen_area, by = join_by(partei == wk_gewinner_partei)) |> 
  select(partei, starts_with("anteil_")) |> 
  pivot_longer(cols = c(anteil_erststimmen, anteil_area, anteil_wahlkreise),
               names_to = "variable", values_to = "anteil", 
               names_transform = function(x) str_to_title(str_remove(x, "anteil_"))) |> 
  mutate(variable = ifelse(variable == "Area", "Fläche", variable)) |> 
  filter(variable != "Erststimmen") |> 
  ggplot(aes(partei, group = variable, fill = partei)) +
  geom_col(
    aes(y = anteil, alpha = variable),
    position = position_dodge(width = -0.4)
    ) +
  scale_y_continuous(labels = scales::label_percent()) +
  scale_fill_manual(values = party_pal) +
  scale_alpha_manual(values = c(1, 0.3)) +
  guides(fill = "none") +
  labs(
    title = "Anteil der Parteien an den gewonnenen Wahlkreisen und<br>deren Fläche",
    caption = "Daten: Bundeswahlleiterin. Visualisierung: Ansgar Wolsing",
    x = NULL, 
    y = "Anteil (in %)",
    alpha = "Merkmal"
  ) +
  theme(
    legend.position = "top",
    legend.justification = "left",
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )
  

```

#### Größter AfD-Wahlkreis vs. kleinster Wahlkreis (Linke)

```{r}
df_wk_abstand_area |> 
  slice_max(order_by = area, n = 1) |> 
  select(wknr, wkname, wk_gewinner_partei, area_km2)

df_wk_abstand_area |> 
  slice_min(order_by = area, n = 1) |> 
  select(wknr, wkname, wk_gewinner_partei, area_km2)

6310.046	 / 26.21192
```

### Karte mit Wahlkreisbesten

```{r map-erststimmen-choropleth}
shp_wk_erststimmen_gewinner <- shp_wk |> 
  inner_join(df_wk_abstand, by = join_by(WKR_NR == wknr)) 

shp_wk_erststimmen_gewinner |> 
  mutate(wk_gewinner_partei = if_else(wk_gewinner_partei %in% c("CDU", "CSU"),
                                     "CDU/CSU", wk_gewinner_partei),
         wk_gewinner_partei = factor(wk_gewinner_partei, 
                                     levels = c("CDU/CSU", "AfD", "SPD", 
                                                "Grüne", "Die Linke"))) |> 
  ggplot(aes(fill = wk_gewinner_partei)) +
  geom_sf(col = "white", linewidth = 0.1) +
  scale_fill_manual(values = party_pal) +
  labs(
    title = "Gewonnene Wahlkreise nach Parteien (Erststimmen)",
    caption = "Daten: Bundeswahlleiterin. Visualisierung: Ansgar Wolsing",
    fill = NULL
  ) +
  theme(
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.text.x = element_blank()
  )
```

```{r centroids}

shp_wk_centroids <- shp_wk |> 
  inner_join(df_wk_abstand, by = join_by(WKR_NR == wknr)) |> 
  mutate(geometry = st_centroid(geometry)) |> 
  mutate(area_km2 = as.numeric(area) / 1000^2) |> 
  st_buffer(dist = 10000) # konvertiert POINT zu POLYGON

```

### Berechnetes Grid laden

Vorher find-nearest-grid-cell.R ausführen

```{r assign-grid-cells, cache=TRUE}

# Run find-nearest-grid-cell.R
grid_wk <- read_rds(here("data", "Wahlkreise", "grid-wk.rds"))
```

```{r}
shp_wk_centroids_shifted <- grid_wk |> 
 inner_join(df_wk_abstand, by = join_by(centroid_id == wknr)) |> 
  mutate(geometry = st_centroid(geometry)) |> 
  st_buffer(dist = 9000)
```

```{r map-centroids}

shp_wk_centroids_shifted |> 
  ggplot(aes(fill = wk_gewinner_partei)) +
  geom_sf(
    shape = 21, color = "white", linewidth = 0.1) +
  scale_fill_manual(values = party_pal) +
  labs(
    title = "Gewonnene Wahlkreise nach Parteien (Erststimmen)",
    caption = "Daten: Bundeswahlleiterin. Visualisierung: Ansgar Wolsing",
    fill = NULL
  ) +
  theme(
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.text.x = element_blank()
  )
```

#### Bubble-Größe variiert

##### Nach Erststimmenanteil

```{r map-centroids-bubble}

shp_wk_centroids_shifted |> 
  st_centroid() |> 
  ggplot(aes(fill = wk_gewinner_partei)) +
  geom_sf(
    aes(size = anteil_gewinner),
    shape = 21, color = "white", alpha = 0.8) +
  scale_fill_manual(values = party_pal) +
  scale_size_area(max_size = 3) +
  labs(
    title = "Gewonnene Wahlkreise nach Parteien (Erststimmen)",
    caption = "Daten: Bundeswahlleiterin. Visualisierung: Ansgar Wolsing",
    fill = NULL
  ) +
  theme(
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.text.x = element_blank()
  )
```

##### Nach Abstand zum Zweiten

```{r map-centroids-bubble-abstand}

shp_wk_centroids_shifted |> 
  st_centroid() |> 
  mutate(wk_gewinner_partei = if_else(wk_gewinner_partei %in% c("CDU", "CSU"),
                                     "CDU/CSU", wk_gewinner_partei),
         wk_gewinner_partei = factor(wk_gewinner_partei, 
                                     levels = c("CDU/CSU", "AfD", "SPD", 
                                                "Grüne", "Die Linke"))) |> 
  ggplot(aes(fill = wk_gewinner_partei)) +
  geom_sf(
    aes(size = wk_abstand),
    shape = 21, color = "white", alpha = 0.8) +
  scale_fill_manual(values = party_pal) +
  scale_size_area(max_size = 4, labels = scales::label_percent()) +
  guides(
    fill = guide_legend(order = 1, override.aes = list(size = 2)),
    size = guide_legend(order = 2, override.aes = list(color = "grey20"))
  ) +
  labs(
    title = "Gewonnene Wahlkreise nach Parteien",
    subtitle = "(Erststimmen)",
    caption = "Daten: Bundeswahlleiterin. Visualisierung: Ansgar Wolsing",
    fill = "Wahlkreisbeste(r)",
    size = "Abstand Zweitplatzierte(r)"
  ) +
  theme(
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.text.x = element_blank(),
    plot.title = element_markdown(hjust = 0.5, size = 12),
    plot.subtitle = element_textbox(hjust = 0.5, halign = 0.5, size = 11),
    plot.caption = element_textbox(hjust = 0.5, halign = 0.5, size = 7, width = 1.6),
    legend.position = "bottom",
    legend.text = element_text(size = 8),
    legend.justification = "center",
    legend.direction = "vertical",
    legend.key.size = unit(0.2, "cm")
  )
```

### Animation

```{r}
shp_bundeslaender <- shp_wk |> 
  group_by(LAND_NR) |> 
  summarize(geometry = st_union(geometry))
```

```{r map-animation, cache=TRUE}

p_anim <- shp_wk_erststimmen_gewinner |> 
  select(WKR_NR, wk_gewinner_partei) |> 
  mutate(map_type = "Choropleth") |> 
  bind_rows(
    shp_wk_centroids_shifted |> 
      select(WKR_NR = cell_id, wk_gewinner_partei) |> 
      mutate(map_type = "Centroids")
  ) |> 
  st_make_valid() |> 
  mutate(map_type = factor(map_type, levels = c("Choropleth", "Centroids"))) |>
  mutate(wk_gewinner_partei = if_else(wk_gewinner_partei %in% c("CDU", "CSU"),
                                     "CDU/CSU", wk_gewinner_partei),
         wk_gewinner_partei = factor(wk_gewinner_partei, 
                                     levels = c("CDU/CSU", "AfD", "SPD", 
                                                "Grüne", "Die Linke"))) |> 
  ggplot(aes(fill = wk_gewinner_partei, col = wk_gewinner_partei)) +
  geom_sf(
    data = shp_bundeslaender,
    inherit.aes = FALSE, fill = "transparent", color = "grey40", linewidth = 0.1) +
  geom_sf(shape = 21, size = 1, linewidth = 0.1, color = "white") +
  scale_fill_manual(values = party_pal, aesthetics = list("fill", "color")) +
  # facet_wrap(vars(map_type)) +
  guides(fill = guide_legend(override.aes = list(size = 2, linewidth = 2))) +
  labs(
    title = "Gewonnene Wahlkreise nach Parteien",
    subtitle = "(Erststimmen)",
    caption = "**Daten:** Bundeswahlleiterin. **Visualisierung:** Ansgar Wolsing",
    fill = NULL 
  ) +
  theme(
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.text.x = element_blank(),
    plot.title = element_markdown(hjust = 0.5, size = 12),
    plot.subtitle = element_textbox(hjust = 0.5, halign = 0.5, size = 11),
    plot.caption = element_textbox(hjust = 0.5, halign = 0.5, size = 7, width = 1.6),
    legend.position = "bottom",
    legend.text = element_text(size = 8),
    legend.justification = "center",
    legend.key.size = unit(0.15, "cm")
  ) +
  transition_states(map_type)
```

```{r}

if (!dir.exists("plots")) dir.create("plots")

# GIF output
animate(p_anim, res = 200, width = 800, height = 800, units = "px", bg = "white")
anim_save(file.path("plots", "btw25-wahlkreise-erststimmen.gif"))

```

```{r}
# Video
animate(p_anim, res = 200, width = 800, height = 800, units = "px", bg = "white",
        renderer = ffmpeg_renderer(format = "mp4"))
anim_save(file.path("plots", "btw25-wahlkreise-erststimmen.mp4"))
  
```

### Vergleich Platzierung im Grid vs. Wahlkreise

```{r}
ggplot() +
  geom_sf(
    data = shp_wk,
    fill = "grey90", color = "grey10", linewidth = 0.2
  ) +
  geom_sf(
    data = shp_wk_centroids_shifted,
    color = "purple", size = 1
  ) +
  theme_void()
```

### Länge der Wahlkreis-Namen

```{r}
shp_wk |> 
  st_drop_geometry() |> 
  transmute(
    WKR_NAME,
    name_length = str_length(WKR_NAME)
    ) |> 
  arrange(-name_length) |> 
  head(10)
```

```{r plot-histogram-wknamen-laenge}

shp_wk |> 
  st_drop_geometry() |> 
  transmute(name_length = str_length(WKR_NAME)) |> 
  ggplot(aes(name_length)) +
  geom_histogram(binwidth = 5, fill = color_pal[2]) +
  labs(
    title = "Zeichenlänge der Wahlkreisnamen",
    x = "Anzahl Zeichen", y = "Anzahl Wahlkreise"
  ) +
  theme(
    panel.grid.major.x = element_blank(),
    panel.grid.minor.x = element_blank()
  )
```

### Fläche Berlin vs. AfD-Wahlkreise

```{r}

# Wahlberechtigte Berlin
wahlberechtigte_berlin <- df_wk_ergebnisse |>  
  filter(bundesland == "11") |>
  distinct(wknr, wahlberechtigte) |> 
  summarize(sum(wahlberechtigte)) |> 
  pull()
wahlberechtigte_berlin

# Fläche Berlin
area_berlin <- df_wk_abstand_area |> 
  filter(bundesland == "11") |> 
  st_drop_geometry() |> 
  summarize(sum(area_km2))

df_wk_ergebnisse |> 
  distinct(wknr, wahlberechtigte) |> 
  inner_join(df_wk_abstand_area, by = "wknr") |> 
  filter(wk_gewinner_partei == "AfD") |> 
  select(wknr, wkname, area_km2, wahlberechtigte, wkname) |> 
  arrange(wahlberechtigte) |> 
  mutate(
    wahlberechtigte_cumul = cumsum(wahlberechtigte),
    area_km2_cumul = cumsum(area_km2))


29000.035 / area_berlin
```

### Einzelbild Centroids für PW Portal

```{r map-centroids-einzeln-pwportal, fig.width=5, fig.height=7, fig.dpi=300}
shp_wk_erststimmen_gewinner |> 
  select(WKR_NR, wk_gewinner_partei) |> 
  mutate(map_type = "Choropleth") |> 
  bind_rows(
    shp_wk_centroids_shifted |> 
      select(WKR_NR = cell_id, wk_gewinner_partei) |> 
      mutate(map_type = "Centroids")
  ) |> 
  st_make_valid() |> 
  mutate(map_type = factor(map_type, levels = c("Choropleth", "Centroids"))) |>
  mutate(wk_gewinner_partei = if_else(wk_gewinner_partei %in% c("CDU", "CSU"),
                                     "CDU/CSU", wk_gewinner_partei),
         wk_gewinner_partei = factor(wk_gewinner_partei, 
                                     levels = c("CDU/CSU", "AfD", "SPD", 
                                                "Grüne", "Die Linke"))) |> 
  filter(map_type == "Centroids") |> 
  ggplot(aes(fill = wk_gewinner_partei, col = wk_gewinner_partei)) +
  geom_sf(
    data = shp_bundeslaender,
    inherit.aes = FALSE, fill = "transparent", color = "grey40", linewidth = 0.1) +
  geom_sf(shape = 21, size = 1, linewidth = 0.1, color = "white") +
  scale_fill_manual(values = party_pal, aesthetics = list("fill", "color")) +
  guides(fill = guide_legend(override.aes = list(size = 2, linewidth = 2))) +
  labs(
    title = "Gewonnene Wahlkreise nach Parteien",
    subtitle = "(Erststimmen)",
    caption = "**Daten:** Bundeswahlleiterin. **Visualisierung:** Ansgar Wolsing",
    fill = NULL 
  ) +
  theme(
    panel.grid = element_blank(),
    axis.title = element_blank(),
    axis.text = element_blank(),
    axis.text.x = element_blank(),
    plot.title = element_markdown(hjust = 0.5, size = 12),
    plot.subtitle = element_textbox(hjust = 0.5, halign = 0.5, size = 11),
    plot.caption = element_textbox(hjust = 0.5, halign = 0.5, size = 7, width = 1.6),
    legend.position = "bottom",
    legend.text = element_text(size = 8),
    legend.justification = "center",
    legend.key.size = unit(0.15, "cm")
  )
```
